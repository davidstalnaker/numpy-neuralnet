<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyExtensions</name>
    </assembly>
    <members>
        <member name="T:MyExtensions.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:MyExtensions.Extensions.RandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Grabs a random file
            </summary>
            <typeparam name="T">type of the source items</typeparam>
            <param name="source">source items</param>
            <returns>a random item</returns>
        </member>
        <member name="M:MyExtensions.Extensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a distinct set of items as determined by compareBy
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TUnique"></typeparam>
            <param name="source"></param>
            <param name="compareBy"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Extensions.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws argument null exception if item is null
            </summary>
            <typeparam name="T">type of item</typeparam>
            <param name="item">item to check</param>
            <param name="name">name of the parameter</param>
        </member>
        <member name="M:MyExtensions.Extensions.RowCount(System.Windows.Forms.ListBox)">
            <summary>
            Gets the number of visible rows in the listbox
            </summary>
            <param name="listbox">listbox to view</param>
            <returns>number of items</returns>
        </member>
        <member name="M:MyExtensions.Extensions.RandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Double)">
            <summary>
            Returns a random element from the source and gives a percent chance to only take an item that returns true from preferredItem
            </summary>
            <typeparam name="T">Type of the source enumerable</typeparam>
            <param name="source">items to select an element from</param>
            <param name="preferredItemSelector">function to determine if an item should be preferred</param>
            <param name="percentWeightTowardsPreferred">percent chance to choose a prefered item in the form .8 = 80%, etc</param>
            <returns>random item weighted towards preferedItems</returns>
        </member>
        <member name="M:MyExtensions.Extensions.FisherYatesShuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the list 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Extensions.FisherYatesShuffleYield``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the list lazily
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Extensions.DoubleStringToArray(System.String,System.String)">
            <summary>
            Converts a space delimited string of doubles into an array
            </summary>
            <param name="doubles">string containing the doubles</param>
            <param name="separators">string of characters separating the doubles</param>
            <returns>double[]</returns>
        </member>
        <member name="M:MyExtensions.Extensions.FloatStringToArray(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="floats"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Extensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts the source to a string separated by the separator.
             Uses .ToString on each object and string.Empty on null objects
            </summary>
            <typeparam name="T">source ienumerable type</typeparam>
            <param name="source">items to process</param>
            <param name="separator">string to insert between each item</param>
            <returns>string of items separated by separator</returns>
        </member>
        <member name="M:MyExtensions.Extensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Converts the source to a single string separated by the separator
            </summary>
            <typeparam name="T">type of source</typeparam>
            <param name="source">source ienumerable of items</param>
            <param name="separator">string that separates each item</param>
            <param name="selector">func to select a string from each item</param>
            <returns>a string of items separated by separator</returns>
        </member>
        <member name="M:MyExtensions.Extensions.ToString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins the string ienumerable with the separator
            </summary>
            <param name="source">string items to join together</param>
            <param name="separator">string to put inbetween items</param>
            <returns>string with items separated by separator</returns>
        </member>
        <member name="M:MyExtensions.Extensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts the source into a HashSet
            </summary>
            <typeparam name="TSource">Type of source items</typeparam>
            <typeparam name="TResult">Type of result items</typeparam>
            <param name="source">source items</param>
            <param name="resultSelector">selector for results</param>
            <returns>HashSet of items with type TResult</returns>
        </member>
        <member name="M:MyExtensions.Extensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the source into a HashSet
            </summary>
            <typeparam name="TSource">type of source items</typeparam>
            <param name="source">source items</param>
            <returns>HashSet of items in source</returns>
        </member>
        <member name="M:MyExtensions.Extensions.IsNullOrEmpty(System.String)">
            <summary>
            Checks if the string is null or empty
            </summary>
            <param name="input">input string</param>
            <returns>true if it's null or empty</returns>
        </member>
        <member name="M:MyExtensions.Extensions.HasEnglishCharsOnly(System.String)">
            <summary>
            Checks if the string has only english characters
            </summary>
            <param name="input">input string</param>
            <returns>true if it is in english</returns>
        </member>
        <member name="M:MyExtensions.Extensions.DisposeAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Disposes all items in the source
            </summary>
            <typeparam name="T">Some IDisposable type</typeparam>
            <param name="source">items to dispose</param>
        </member>
        <member name="M:MyExtensions.Extensions.LevenshteinDistance(System.String,System.String)">
            <summary>
            Compute the distance between two strings.
            </summary>
            <param name="source">The first of the two strings.</param>
            <param name="target">The second of the two strings.</param>
            <returns>The Levenshtein cost.</returns>
        </member>
    </members>
</doc>
